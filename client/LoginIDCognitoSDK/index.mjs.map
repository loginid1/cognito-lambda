{"version":3,"sources":["../src/utils/encodes.ts","../src/webauthn/index.ts","../src/cognito/index.ts","../src/loginid/index.ts","../src/index.ts"],"sourcesContent":["/**\r\n * Converts a base64-encoded string to an ArrayBuffer.\r\n *\r\n * @param {string} data - The base64-encoded string to convert.\r\n * @returns {ArrayBuffer} - The resulting ArrayBuffer.\r\n */\r\nexport const base64ToBuffer = (data: string): ArrayBuffer => {\r\n\t// Replacing URL-safe characters and decoding the base64 string\r\n\tdata = data.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\tconst binary = atob(data);\r\n\tconst bytes = new Uint8Array(binary.length);\r\n\r\n\t// Populating the Uint8Array with binary data\r\n\tfor (let i = 0; i < binary.length; i++) {\r\n\t\tbytes[i] = binary.charCodeAt(i);\r\n\t}\r\n\r\n\treturn bytes.buffer;\r\n};\r\n\r\n/**\r\n * Converts an ArrayBuffer to a base64-encoded string.\r\n *\r\n * @param {ArrayBuffer} data - The ArrayBuffer to convert.\r\n * @returns {string} - The resulting base64-encoded string.\r\n */\r\nexport const bufferToBase64 = (data: ArrayBuffer): string => {\r\n\t// Creating a Uint8Array from the ArrayBuffer\r\n\tconst bytes = new Uint8Array(data);\r\n\tlet binary = \"\";\r\n\r\n\t// Converting Uint8Array to binary string\r\n\tfor (let i = 0; i < bytes.byteLength; i++) {\r\n\t\tbinary += String.fromCharCode(bytes[i]);\r\n\t}\r\n\r\n\t// Encoding the binary string to base64\r\n\tconst base64 = btoa(binary);\r\n\r\n\t// Making the base64 string URL-safe\r\n\treturn base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\r\n};\r\n","import {base64ToBuffer, bufferToBase64} from \"../utils/encodes\";\r\nimport {\r\n\tPublicKeyAssertionCredential,\r\n\tPublicKeyAttestationCredential\r\n} from \"./types\";\r\n\r\n/**\r\n * Creates a new PublicKeyAttestationCredential using the WebAuthn API.\r\n *\r\n * @async\r\n * @param {object} publicKey - Public key information for creating the credential.\r\n * @param {string} publicKey.challenge - A base64-encoded challenge.\r\n * @param {object} publicKey.user - User information.\r\n * @param {string} publicKey.user.id - A base64-encoded user ID.\r\n * @param {Array<object>} publicKey.excludeCredentials - Optional list of credentials to exclude.\r\n * @returns {Promise<PublicKeyAttestationCredential>} - Promise resolving to the attestation object.\r\n * @throws {Error} - If credential creation fails.\r\n */\r\nexport const create = async (\r\n\tpublicKey: any\r\n): Promise<PublicKeyAttestationCredential> => {\r\n\tconst {challenge} = publicKey;\r\n\r\n\t// Converting base64-encoded challenge and user ID to ArrayBuffer\r\n\tpublicKey.challenge = base64ToBuffer(publicKey.challenge);\r\n\tpublicKey.user.id = base64ToBuffer(publicKey.user.id);\r\n\r\n\t// Converting base64-encoded IDs in excludeCredentials, if present\r\n\tif (publicKey.excludeCredentials) {\r\n\t\tfor (const credential of publicKey.excludeCredentials) {\r\n\t\t\tcredential.id = base64ToBuffer(credential.id);\r\n\t\t}\r\n\t}\r\n\r\n\t// Creating a new credential using the WebAuthn API\r\n\tconst credential = (await navigator.credentials.create({\r\n\t\tpublicKey,\r\n\t})) as PublicKeyCredential;\r\n\r\n\t// Handling the case where credential creation fails\r\n\tif (!credential) {\r\n\t\tthrow new Error(\"Failed to create credential\");\r\n\t}\r\n\r\n\t// Extracting information from the response of the created credential\r\n\tconst response = credential.response as AuthenticatorAttestationResponse;\r\n\r\n\tconst attestation = {\r\n\t\tattestation_response: {\r\n\t\t\tchallenge: challenge,\r\n\t\t\tid: bufferToBase64(credential.rawId),\r\n\t\t\ttype: credential.type,\r\n\t\t\tresponse: {\r\n\t\t\t\tattestationObject: bufferToBase64(response.attestationObject),\r\n\t\t\t\tclientDataJSON: bufferToBase64(response.clientDataJSON),\r\n\t\t\t\t// Including transports if available in the response\r\n\t\t\t\t...(response.getTransports && {\r\n\t\t\t\t\ttransports: response.getTransports(),\r\n\t\t\t\t}),\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\treturn attestation;\r\n};\r\n\r\n/**\r\n * Gets an existing PublicKeyAssertionCredential using the WebAuthn API.\r\n *\r\n * @async\r\n * @param {object} publicKey - Public key information for getting the credential.\r\n * @param {string} publicKey.challenge - A base64-encoded challenge.\r\n * @param {Array<object>} publicKey.allowCredentials - Optional list of credentials to allow.\r\n * @returns {Promise<PublicKeyAssertionCredential>} - Promise resolving to the assertion object.\r\n * @throws {Error} - If credential authentication fails.\r\n */\r\nexport const get = async (\r\n\tpublicKey: any\r\n): Promise<PublicKeyAssertionCredential> => {\r\n\tconst challenge = publicKey.challenge;\r\n\r\n\t// Converting base64-encoded challenge to ArrayBuffer\r\n\tpublicKey.challenge = base64ToBuffer(challenge);\r\n\r\n\t// Converting base64-encoded IDs in allowCredentials, if present\r\n\tif (publicKey.allowCredentials) {\r\n\t\tfor (const credential of publicKey.allowCredentials) {\r\n\t\t\tcredential.id = base64ToBuffer(credential.id);\r\n\t\t}\r\n\t}\r\n\r\n\t// Getting an existing credential using the WebAuthn API\r\n\tconst credential = (await navigator.credentials.get({\r\n\t\tpublicKey,\r\n\t})) as PublicKeyCredential;\r\n\r\n\t// Handling the case where credential authentication fails\r\n\tif (!credential) {\r\n\t\tthrow new Error(\"Failed to authenticate credential\");\r\n\t}\r\n\r\n\t// Extracting information from the response of the authenticated credential\r\n\tconst response = credential.response as AuthenticatorAssertionResponse;\r\n\r\n\tconst assertion = {\r\n\t\tassertion_response: {\r\n\t\t\tchallenge: challenge,\r\n\t\t\tid: bufferToBase64(credential.rawId),\r\n\t\t\ttype: credential.type,\r\n\t\t\tresponse: {\r\n\t\t\t\tclientDataJSON: bufferToBase64(response.clientDataJSON),\r\n\t\t\t\tsignature: bufferToBase64(response.signature),\r\n\t\t\t\tauthenticatorData: bufferToBase64(response.authenticatorData),\r\n\t\t\t\t// Including userHandle if available in the response\r\n\t\t\t\tuserHandle: response.userHandle ? bufferToBase64(response.userHandle) : null,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\treturn assertion;\r\n};\r\n\r\nexport type {\r\n\tPublicKeyAssertionCredential,\r\n\tPublicKeyAttestationCredential\r\n};\r\n","import * as webauthn from \"../webauthn/\";\r\nimport {AttestationOptions, CustomAuthenticationOptions} from \"./types\";\r\nimport {\r\n\tAuthenticationDetails,\r\n\tCognitoUser,\r\n\tCognitoUserPool,\r\n\tCognitoUserSession,\r\n\tIAuthenticationCallback,\r\n\tIAuthenticationDetailsData,\r\n\tICognitoUserData,\r\n} from \"amazon-cognito-identity-js\";\r\n\r\n/**\r\n * Enumeration representing different types of custom authentication operations.\r\n */\r\nexport enum CustomAuthentication {\r\n\tAUTH_PARAMS = \"AUTH_PARAMS\",\r\n\tFIDO2_CREATE = \"FIDO2_CREATE\",\r\n\tFIDO2_GET = \"FIDO2_GET\",\r\n}\r\n\r\n/**\r\n * Cognito class for custom authentication using FIDO2.\r\n */\r\nclass Cognito {\r\n\tprivate userPool: CognitoUserPool;\r\n\r\n\t/**\r\n\t * Constructor for the Cognito class.\r\n\t *\r\n\t * @param {string} userPoolId - The ID of the Cognito User Pool.\r\n\t * @param {string} clientId - The client ID associated with the User Pool.\r\n\t */\r\n\tconstructor(userPoolId: string, clientId: string) {\r\n\t\tthis.userPool = new CognitoUserPool({\r\n\t\t\tUserPoolId: userPoolId,\r\n\t\t\tClientId: clientId,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Converts CustomAuthenticationOptions to AttestationOptions.\r\n\t *\r\n\t * @param {CustomAuthenticationOptions} options - Additional options for custom authentication.\r\n\t * @returns {AttestationOptions} - Attestation options for FIDO2 operations.\r\n\t */\r\n\tprivate handleAttestationOptions(\r\n\t\toptions: CustomAuthenticationOptions\r\n\t): AttestationOptions {\r\n\t\tconst attestationOptions: AttestationOptions = {};\r\n\r\n\t\tif (options.attestationOptions?.overrideTimeout !== undefined) {\r\n\t\t\tattestationOptions[\"override_timeout_s\"] = options.attestationOptions.overrideTimeout;\r\n\t\t}\r\n\r\n\t\tif (options.attestationOptions?.requireResidentKey !== undefined) {\r\n\t\t\tattestationOptions[\"require_usernameless\"] = options.attestationOptions.requireResidentKey;\r\n\t\t}\r\n\r\n\t\treturn attestationOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs custom authentication using FIDO2 for either create or get operations.\r\n\t *\r\n\t * @param {string} username - The username of the Cognito user.\r\n\t * @param {string} idToken - The ID token associated with the user.\r\n\t * @param {CustomAuthentication} type - The type of custom authentication operation (FIDO2_CREATE or FIDO2_GET).\r\n\t * @param {CustomAuthenticationOptions} options - Additional options for custom authentication.\r\n\t * @param {object} options.metaData - Additional metadata for the authentication process.\r\n\t * @param {AttestationOptions} options.attestationOptions - Attestation options for FIDO2 operations.\r\n\t * @returns {Promise<CognitoUserSession>} - A promise resolving to the Cognito user session.\r\n\t */\r\n\tpublic async customAuthenticationPasskey(\r\n\t\tusername: string,\r\n\t\tidToken: string,\r\n\t\ttype: CustomAuthentication,\r\n\t\toptions: CustomAuthenticationOptions,\r\n\t): Promise<CognitoUserSession> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst authenticationData: IAuthenticationDetailsData = {\r\n\t\t\t\tUsername: username,\r\n\t\t\t\tPassword: \"\",\r\n\t\t\t};\r\n\t\t\tconst userData: ICognitoUserData = {\r\n\t\t\t\tUsername: username,\r\n\t\t\t\tPool: this.userPool,\r\n\t\t\t};\r\n\r\n\t\t\tconst authenticationDetails = new AuthenticationDetails(authenticationData);\r\n\t\t\tconst user = new CognitoUser(userData);\r\n\r\n\t\t\tconst metaData = options.metaData || {};\r\n\t\t\tconst attestationOptions = this.handleAttestationOptions(options);\r\n\r\n\t\t\t// Callback object for FIDO2_CREATE operation\r\n\t\t\tconst callbackCreateObj: IAuthenticationCallback = {\r\n\t\t\t\tcustomChallenge: async function (challengParams: any) {\r\n\t\t\t\t\tconst clientMetadata = {\r\n\t\t\t\t\t\t...metaData,\r\n\t\t\t\t\t\tattestation_options: JSON.stringify(attestationOptions),\r\n\t\t\t\t\t\tauthentication_type: CustomAuthentication.FIDO2_CREATE,\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (challengParams?.challenge === CustomAuthentication.AUTH_PARAMS) {\r\n\t\t\t\t\t\tuser.sendCustomChallengeAnswer(\r\n\t\t\t\t\t\t\tCustomAuthentication.AUTH_PARAMS,\r\n\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\tclientMetadata\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst publicKey = JSON.parse(challengParams.public_key);\r\n\t\t\t\t\tconst result = await webauthn.create(publicKey);\r\n\r\n\t\t\t\t\tuser.sendCustomChallengeAnswer(\r\n\t\t\t\t\t\tJSON.stringify({...result, id_token: idToken}),\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tclientMetadata\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tonSuccess: function (session: CognitoUserSession) {\r\n\t\t\t\t\tresolve(session);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tonFailure: function (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\t// Callback object for FIDO2_GET operation\r\n\t\t\tconst callbackGetObj: IAuthenticationCallback = {\r\n\t\t\t\tcustomChallenge: async function (challengParams: any) {\r\n\t\t\t\t\tconst clientMetadata = {\r\n\t\t\t\t\t\t...metaData,\r\n\t\t\t\t\t\tauthentication_type: CustomAuthentication.FIDO2_GET,\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (challengParams?.challenge === CustomAuthentication.AUTH_PARAMS) {\r\n\t\t\t\t\t\tuser.sendCustomChallengeAnswer(\r\n\t\t\t\t\t\t\tCustomAuthentication.AUTH_PARAMS,\r\n\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\tclientMetadata\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst publicKey = JSON.parse(challengParams.public_key);\r\n\t\t\t\t\tconst result = await webauthn.get(publicKey);\r\n\r\n\t\t\t\t\tuser.sendCustomChallengeAnswer(\r\n\t\t\t\t\t\tJSON.stringify({...result}),\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tclientMetadata\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tonSuccess: function (session: CognitoUserSession) {\r\n\t\t\t\t\tresolve(session);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tonFailure: function (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\t// Initiating custom authentication based on the specified type\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase CustomAuthentication.FIDO2_CREATE:\r\n\t\t\t\t\tuser.setAuthenticationFlowType(\"CUSTOM_AUTH\");\r\n\t\t\t\t\tuser.initiateAuth(authenticationDetails, callbackCreateObj);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase CustomAuthentication.FIDO2_GET:\r\n\t\t\t\t\tuser.setAuthenticationFlowType(\"CUSTOM_AUTH\");\r\n\t\t\t\t\tuser.initiateAuth(authenticationDetails, callbackGetObj);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Invalid custom authentication type\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport type {CustomAuthenticationOptions};\r\n\r\nexport default Cognito;\r\n","import {CognitoUserSession} from \"amazon-cognito-identity-js\";\r\nimport Cognito, {\r\n\tCustomAuthentication,\r\n\tCustomAuthenticationOptions,\r\n} from \"../cognito\";\r\n\r\n/**\r\n * LoginIDCognitoWebSDK class provides methods for adding and signing in with a passkey using FIDO2 operations.\r\n */\r\nclass LoginIDCognitoWebSDK {\r\n\tprivate cognito: Cognito;\r\n\r\n\t/**\r\n\t * Constructor for the LoginIDCognitoWebSDK class.\r\n\t *\r\n\t * @param {string} userPoolId - The ID of the Cognito User Pool.\r\n\t * @param {string} clientId - The client ID associated with the User Pool.\r\n\t */\r\n\tconstructor(userPoolId: string, clientId: string) {\r\n\t\tthis.cognito = new Cognito(userPoolId, clientId);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a passkey for the specified username using FIDO2 create operation.\r\n\t *\r\n\t * @param {string} username - The username of the Cognito user.\r\n\t * @param {string} idToken - The ID token associated with the user.\r\n\t * @param {CustomAuthenticationOptions} options - Additional options for custom authentication.\r\n\t * @returns {Promise<CognitoUserSession>} - A promise resolving to the Cognito user session.\r\n\t */\r\n\tpublic async addPasskey(\r\n\t\tusername: string,\r\n\t\tidToken: string,\r\n\t\toptions?: CustomAuthenticationOptions\r\n\t): Promise<CognitoUserSession> {\r\n\t\treturn this.cognito.customAuthenticationPasskey(\r\n\t\t\tusername,\r\n\t\t\tidToken,\r\n\t\t\tCustomAuthentication.FIDO2_CREATE,\r\n\t\t\toptions || {}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Signs in with a passkey for the specified username using FIDO2 get operation.\r\n\t *\r\n\t * @param {string} username - The username of the Cognito user.\r\n\t * @param {CustomAuthenticationOptions} options - Additional options for custom authentication.\r\n\t * @returns {Promise<CognitoUserSession>} - A promise resolving to the Cognito user session.\r\n\t */\r\n\tpublic async signInPasskey(\r\n\t\tusername: string,\r\n\t\toptions?: CustomAuthenticationOptions\r\n\t): Promise<CognitoUserSession> {\r\n\t\treturn this.cognito.customAuthenticationPasskey(\r\n\t\t\tusername,\r\n\t\t\t\"\",\r\n\t\t\tCustomAuthentication.FIDO2_GET,\r\n\t\t\toptions || {}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LoginIDCognitoWebSDK;\r\n","import LoginIDCognitoWebSDK from \"./loginid\";\r\nimport {CustomAuthenticationOptions} from \"./cognito\";\r\n\r\nexport type {CustomAuthenticationOptions};\r\nexport default LoginIDCognitoWebSDK;\r\n"],"mappings":"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","names":["base64ToBuffer","data","binary","bytes","i","bufferToBase64","create","publicKey","challenge","base64ToBuffer","credential","response","bufferToBase64","get","AuthenticationDetails","CognitoUser","CognitoUserPool","Cognito","userPoolId","clientId","CognitoUserPool","options","attestationOptions","username","idToken","type","resolve","reject","authenticationData","userData","authenticationDetails","AuthenticationDetails","user","CognitoUser","metaData","callbackCreateObj","challengParams","clientMetadata","publicKey","result","create","session","err","callbackGetObj","get","cognito_default","LoginIDCognitoWebSDK","userPoolId","clientId","cognito_default","username","idToken","options","loginid_default","src_default","loginid_default"]}