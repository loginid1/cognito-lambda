AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUp.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallenge.Arn
        
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: my-app
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      WriteAttributes:
        - email
        - name
      ReadAttributes:
        - email
        - name

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PreSignUp
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      InlineCode: "code"
      Environment:
        Variables:
          #LOGINID_BASE_URL: 
          #LOGINID_CLIENT_ID: 
          #PRIVATE_KEY: 
      Layers:
        #- arn:aws:lambda:us-west-1:978771399365:layer:LoginID-SDK:1
  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DefineAuthChallenge
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      InlineCode: "code"
  DefineAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateAuthChallenge
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      InlineCode: "code"
      Environment:
        Variables:
          #LOGINID_BASE_URL: 
          #LOGINID_CLIENT_ID: 
          #PRIVATE_KEY: 
      Layers:
        #- arn:aws:lambda:us-west-1:978771399365:layer:LoginID-SDK:1
  CreateAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
      
  VerifyAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-VerifyAuthChallenge
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      InlineCode: "code"
      Environment:
        Variables:
          #LOGINID_BASE_URL: 
          #LOGINID_CLIENT_ID: 
          #PRIVATE_KEY: 
      Layers:
        #- arn:aws:lambda:us-west-1:978771399365:layer:LoginID-SDK:1
  VerifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt VerifyAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
        
Outputs :
  UserPoolId:
    Value: !Ref 'UserPool'
  AppClientID:
    Value: !Ref 'UserPoolClient'


Parameters:
  LOGINID_FIDO2_Rpid:
    Type: String
    Default: ""
    Description: "The RPID is the domain of your user facing authentication interface. By default it will be set to whatever domain your solution is hoster on. However be aware that FIDO/Passkey credentials, public keys, will be permanently bound to the specified domain without ability to change that. You may wish to set RPID to be a root of your website: example.com, and this would allow your child subdomains, login.example.com, to login with these credentials, so long you explicitly specify that it should use your parent, or root RPID, example.com. You will need to specify your actual domain, origin, allow list."
  LOGINID_FIDO2_Origin_Allowlist:
    Type: String
    Default: ""
    Description: "List of allowed origins. At least one must be specified. Comma separated. Must includes protocol. HTTPS is mandatory. Example: https://login.example.com,https://auth.example.com,https://example.com"
  
  LOGINID_UI_Page_Background_Color:
    Type: String
    Default: ""
    Description: "Page background color in web RGB #FFFFFF notation"
  LOGINID_UI_Page_Background_Image:
    Type: String
    Default: ""
    Description: "URL location of your page background image"
  
  LOGINID_UI_Login_Logo:
    Type: String
    Default: ""
    Description: "URL location of your login UI logo"
  LOGINID_UI_Login_Background_Color:
    Type: String
    Default: ""
    Description: "UI box background color in web RGB #FFFFFF notation"
  LOGINID_UI_Login_Buttons_Color:
    Type: String
    Default: ""
    Description: "UI box buttons color in web RGB #FFFFFF notation"
  LOGINID_UI_Page_Background_Image:
    Type: String
    Default: ""
    Description: "URL location of your UI box background image"
