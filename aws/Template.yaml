AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Schema:
        - Name: loginid_user_id
          AttributeDataType: String
          Mutable: true
          Required: false
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUp.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallenge.Arn
        
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: loginid-app
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      WriteAttributes:
        - email
        - name
      ReadAttributes:
        - email
        - name
        - custom:loginid_user_id

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaSecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref LoginIDClientSecret

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PreSignUp
      InlineCode:
        print("Code")
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          LOGINID_BASE_URL: !Ref LOGINIDBaseURL
          LOGINID_SECRET_NAME: !Sub ${AWS::StackName}-loginid-keys

  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DefineAuthChallenge
      InlineCode:
        print("Code")
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
  DefineAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateAuthChallenge
      InlineCode:
        print("Code")
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          LOGINID_BASE_URL: !Ref LOGINIDBaseURL
          LOGINID_SECRET_NAME: !Sub ${AWS::StackName}-loginid-keys

  CreateAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn
      
  VerifyAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-VerifyAuthChallenge
      InlineCode:
        print("Code")
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          LOGINID_BASE_URL: !Ref LOGINIDBaseURL
          LOGINID_SECRET_NAME: !Sub ${AWS::StackName}-loginid-keys

  VerifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt VerifyAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn

  LoginIDClientSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub ${AWS::StackName}-loginid-keys
      Description: LoginID keys
      SecretString: !Ref LOGINIDPrivateKey

  LoginIDKeysSecretPolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      SecretId: !Ref LoginIDClientSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Resource: "*"
            Action: "secretsmanager:GetSecretValue"
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-Credential API
      Description: API needed for creating and managing credentials
      Body:
        openapi: "3.0.1"
        info:
          title: "CredentialAPI"
          description: "Gateway for LoginID credential API"
          version: "2023-08-21T05:58:04Z"
        paths:
          /fido2/create/complete:
            post:
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - LoginID-Cognito-Pool: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /fido2/create/init:
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - LoginID-Cognito-Pool: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /credentials/revoke:
            post:
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - LoginID-Cognito-Pool: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /credentials/list:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - LoginID-Cognito-Pool: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /fido2/register/complete:
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /fido2/register/init:
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /credentials/rename:
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - LoginID-Cognito-Pool: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PasskeyAPI.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
          securitySchemes:
            LoginID-Cognito-Pool:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "cognito_user_pools"
              x-amazon-apigateway-authorizer:
                type: "cognito_user_pools"
                providerARNs:
                  - Fn::GetAtt:
                      - UserPool
                      - Arn

  ProxyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      RestApiId: !Ref RestAPI
      PathPart: '{proxy+}'

  APIGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          -
            StatusCode: 200
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt PasskeyAPI.Arn
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref RestAPI

  APIGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - APIGatewayRootMethod
    Properties:
      RestApiId: !Ref RestAPI
      StageName: dev

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - Fn::GetAtt:
            - UserPool
            - Arn
      RestApiId: !Ref RestAPI
      Type: COGNITO_USER_POOLS

  PasskeyAPI:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PasskeyAPI
      Description: 
      MemorySize: 128
      Timeout: 3
      Handler: index.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_REGION_NAME: !Ref AWS::Region
          LOGINID_BASE_URL: !Ref LOGINIDBaseURL
          LOGINID_SECRET_NAME: !Sub ${AWS::StackName}-loginid-keys
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: '*'
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref LoginIDClientSecret
      Architectures:
        - x86_64
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      EphemeralStorage:
        Size: 512
      InlineCode:
        print("Code")

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PasskeyAPI.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/*
        
Outputs:
  PasskeyAPIEndpoint:
    Value: !Sub https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/dev
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient

Parameters:
  LOGINIDBaseURL:
    Type: String
    Description: "BaseURL required for LoginID service"
  LOGINIDPrivateKey:
    Type: String
    NoEcho: true
    Description: "Private key needed for generating authorization token required for LoginID service"
