AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  LoginIDBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyBucket
    Properties:
      ServiceToken: !GetAtt 'CopyFunction.Arn'
      DestBucket: !Ref LoginIDBucket
      SourceBucket: cognito-loginid
      Objects:
        - lambdas/nodejs/PreSignup.zip

  CopyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::cognito-loginid/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LoginIDBucket}/*'

  CopyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt 'CopyRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          import cfnresponse

          s3 = boto3.client('s3')


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout

              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, None)


          def copy_objects(source_bucket, dest_bucket, objects):
              for o in objects:
                  key = o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)


          def delete_objects(bucket, objects):
              objects = {'Objects': [{'Key': o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Schema:
        - Name: loginid_user_id
          AttributeDataType: String
          Mutable: true
          Required: false
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !GetAtt PreSignup.Arn
        
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: loginid-app
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      WriteAttributes:
        - email
        - name
      ReadAttributes:
        - email
        - name

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"


  PreSignup:
    Type: AWS::Serverless::Function
    DependsOn: CopyZips
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PreSignup
      CodeUri:
        Bucket: !Ref LoginIDBucket
        Key: lambdas/nodejs/PreSignup.zip
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active

  PreSignupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignup.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt UserPool.Arn


Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolArn:
    Value: !GetAtt UserPool.Arn
  UserPoolClientId:
    Value: !Ref UserPoolClient

